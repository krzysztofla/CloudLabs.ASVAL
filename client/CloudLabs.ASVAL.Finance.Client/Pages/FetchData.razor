@page "/fetchdata"
@using Grpc.Net.Client
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Symbol</td>
                <td>@forecast.Timestamp</td>
                <td>@forecast.Value</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        AppContext.SetSwitch(
            "System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport", true);
        AppContext.SetSwitch("System.Net.Http.SocketsHttpHandler.Http2Support", true);
        var channel = GrpcChannel.ForAddress("https://localhost:7108");
        var client = new Fnance.Client.PricingFeed.PricingFeedClient(channel);
        
        var pricingStream  = client.SubscribePricing(new Fnance.Client.PricingRequest() {Symbol = "USD"});
        
        while (await pricingStream.ResponseStream.MoveNext(CancellationToken.None))
        {
            var crt = pricingStream.ResponseStream.Current;
            forecasts.Add(new WeatherForecast() { Symbol = crt.Symbol, Timestamp = crt.Timestamp, Value = crt.Value});
        }
        
    }

    public class WeatherForecast
    {
        public long Timestamp { get; set; }

        public string Symbol { get; set; }

        public int Value { get; set; }
    }

}